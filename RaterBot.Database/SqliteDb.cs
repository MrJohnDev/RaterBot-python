// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace RaterBot.Database
{
	public partial class SqliteDb : DataConnection
	{
		public SqliteDb()
		{
			InitDataContext();
		}

		public SqliteDb(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public SqliteDb(LinqToDBConnectionOptions<SqliteDb> options)
			: base(options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<Interaction>         Interactions          => this.GetTable<Interaction>();
		public ITable<Post>                Posts                 => this.GetTable<Post>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static Interaction? Find(this ITable<Interaction> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Interaction?> FindAsync(this ITable<Interaction> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Post? Find(this ITable<Post> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Post?> FindAsync(this ITable<Post> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}
		#endregion
	}
}
